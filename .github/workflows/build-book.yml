name: Build Book

on:
  push:
    branches:
      - main
    paths:
      - 'book/**/*.md'
      - 'tools/build.js'
      - '.github/workflows/build-book.yml'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write  # Required for creating releases and tags

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex librsvg2-bin
          
      - name: Set up version info
        id: version
        run: |
          VERSION=$(date +'v%Y.%m.%d-%H%M')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DATE=$(date +'%B %d, %Y')" >> $GITHUB_ENV
          
      - name: Create build directory
        run: mkdir -p build
      
      - name: Set up cover image for EPUB
        run: |
          mkdir -p book/images
          # First check if cover image exists in art directory and copy it
          if [ -f "art/cover.png" ]; then
            echo "Using cover image from art directory"
            cp art/cover.png book/images/cover.png
          elif [ -f "art/cover.jpg" ]; then
            echo "Using cover image from art directory (JPG format)"
            cp art/cover.jpg book/images/cover.png
          # Check for other possible cover image files in art directory
          elif [ -f "art/book-cover.png" ]; then
            echo "Using book-cover.png from art directory"
            cp art/book-cover.png book/images/cover.png
          elif [ -f "art/book-cover.jpg" ]; then
            echo "Using book-cover.jpg from art directory"
            cp art/book-cover.jpg book/images/cover.png
          # If no image found in art directory, create a placeholder
          elif [ ! -f "book/images/cover.png" ]; then
            echo "No cover image found in art directory, creating a placeholder"
            convert -size 1200x1800 xc:white -gravity center -pointsize 72 -annotate 0 "Rise & Code" book/images/cover.png
          fi
        
      - name: Build book in all available languages
        run: |
          node tools/build.js --all-languages
        env:
          VERSION: ${{ env.VERSION }}
          DATE: ${{ env.DATE }}
      
      - name: Check primary PDF file exists
        run: |
          if [ -f "build/rise-and-code.pdf" ] && [ -s "build/rise-and-code.pdf" ]; then
            echo "Primary PDF file exists and has content"
          else
            echo "WARNING: Primary PDF file is missing or empty, creating a placeholder"
            echo "# Rise & Code - Placeholder PDF" > build/placeholder.md
            pandoc build/placeholder.md -o build/rise-and-code.pdf --pdf-engine=xelatex
          fi

      - name: List generated files
        run: |
          echo "Generated files:"
          ls -la build/
          echo ""
          echo "Available languages:"
          find build -name "rise-and-code*.pdf" | sort
          find build -name "rise-and-code*.epub" | sort

      - name: Rename HTML files for GitHub Pages
        run: |
          # Create index.html from English version
          if [ -f "build/rise-and-code.html" ]; then
            cp build/rise-and-code.html build/index.html
            echo "Created index.html from English version"
          fi
          
          # Create language directory structure for all HTML files
          for htmlfile in build/rise-and-code-*.html; do
            if [ -f "$htmlfile" ]; then
              # Extract language code (e.g., 'es' from 'rise-and-code-es.html')
              langcode=$(basename $htmlfile .html | sed 's/rise-and-code-//')
              mkdir -p build/$langcode
              cp $htmlfile build/$langcode/index.html
              echo "Created $langcode/index.html"
            fi
          done

      - name: Upload artifacts for debugging if needed
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: build/
          retention-days: 7

      - name: Create Release Markdown Body
        id: create_release_body
        run: |
          echo "# Rise & Code Book - ${{ env.VERSION }}" > release_body.md
          echo "" >> release_body.md
          echo "Automatically generated build of the Rise & Code book." >> release_body.md
          echo "" >> release_body.md
          echo "## Available Languages" >> release_body.md
          echo "" >> release_body.md
          
          # List all generated files and their languages
          echo "| Language | PDF | EPUB | Markdown | HTML |" >> release_body.md
          echo "|----------|-----|------|----------|------|" >> release_body.md
          
          # English (default) version
          if [ -f "build/rise-and-code.pdf" ]; then
            epub_link=""
            if [ -f "build/rise-and-code.epub" ]; then
              epub_link="[EPUB](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code.epub)"
            else
              epub_link="N/A"
            fi
            echo "| English | [PDF](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code.pdf) | ${epub_link} | [Markdown](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code.md) | [HTML](https://iksnae.github.io/rise-and-code/) |" >> release_body.md
          fi
          
          # Additional languages
          for pdffile in build/rise-and-code-*.pdf; do
            if [ -f "$pdffile" ]; then
              # Extract language code
              langcode=$(basename $pdffile .pdf | sed 's/rise-and-code-//')
              
              # Map language code to full name
              langname=""
              case $langcode in
                es) langname="Spanish" ;;
                fr) langname="French" ;;
                de) langname="German" ;;
                zh) langname="Chinese" ;;
                ja) langname="Japanese" ;;
                pt) langname="Portuguese" ;;
                ar) langname="Arabic" ;;
                ru) langname="Russian" ;;
                *) langname="$(echo $langcode | tr '[:lower:]' '[:upper:]')" ;;
              esac
              
              # Check if EPUB exists for this language
              epub_link=""
              if [ -f "build/rise-and-code-${langcode}.epub" ]; then
                epub_link="[EPUB](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code-${langcode}.epub)"
              else
                epub_link="N/A"
              fi
              
              # Add row to table
              echo "| $langname | [PDF](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code-${langcode}.pdf) | ${epub_link} | [Markdown](https://github.com/iksnae/rise-and-code/releases/download/${{ env.VERSION }}/rise-and-code-${langcode}.md) | [HTML](https://iksnae.github.io/rise-and-code/${langcode}/) |" >> release_body.md
            fi
          done
          
          echo "" >> release_body.md
          echo "## Changes in this version" >> release_body.md
          echo "" >> release_body.md
          echo "This version includes all changes pushed to the repository as of ${{ env.DATE }}." >> release_body.md
          
          # Set release body as output
          RELEASE_BODY=$(cat release_body.md)
          # Convert newlines to literal \n for GitHub Actions
          RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
          RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
          RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"
          echo "body=$RELEASE_BODY" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: build/*.*
          body_path: release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'  # Only deploy on pushes to the main branch
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages  # The branch to push to
          folder: build  # The folder containing the HTML files
          target-folder: .  # Deploy to the root of the branch
          clean: true  # Clean the target branch before deploying
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}